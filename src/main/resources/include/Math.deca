public class MathDeca {
	
	
	public  float PI = 3.141592653589793;
	
	public  float anglePrincipal(float theta) {
		
		while (theta > 2 * PI ) {
			theta -= 2 * PI;
		}
		
		while (theta < 0) {
			theta += 2 * PI;
		}
		
		if (theta > PI) {
			theta -= 2*PI ;
		}
		
		return theta;
	}
	
	/**
	 * Cette algorithme après devient lent dès que le nombre d'itération devient plus grand que 25 
	 * */
	 
	public  float racine_n(float a, int n) {
		if (n == 0 ) {
			return 1;
		}
		else {
			return   0.5*(racine_n(a, n -1) + a/racine_n(a, n -1) );
		}
	}
	
	// On peut pas regrouper les deux fonctions racine_n et racine à cause de la réccurence 
	public  float racine(float a) {
		
		if(a < 0) {
			return null;
		}
		
		return racine_n(a, 20);
	}
	
	
	
	public  float puissanceDeDix(int i) {
		if(i < 0) {
			i = -i;
			float count = 1;
			int j=0;
			while(j < i){
				count *= 0.1;
				j++;
			}
			return count;
		}
		
		else {
			float count = 1;
			int j=0;
			while(j < i){
				count *= 10;
				j++;
			}
			return count;
		}
		
	}
	
	public  float puissanceDeDeux(int i) {
		if(i < 0) {
			i = -i;
			float count = 1;
			int j=0;
			while(j < i){
				count *= 0.5;
				j++;
				}
			return count;
		}
		
		else {
			float count = 1;
			int j=0;
			while(j < i){
				count *= 2;
				j++;
				}
			return count;
		}
		
	}
	
	public  float abs(float f ) {
		if (f >= 0) {
			return f;
		}
		else {
			return -f;
		}
	}
	
	
	/**
	 * Cette fonction retourn l'exposant mais en mode decimal càd l'exposant du radix 10 
	*/
	
	public  int getExponent(float d ) {
		int nbrMaxDeDeux = -1023;
		
		if(d != 0) {
			nbrMaxDeDeux = nbrMaxDeDeux(d);
		}
		
		return nbrMaxDeDeux;
	}
	
	
	public  int nbrMaxDeDeux(float d ) {
		d = abs(d);
		int m = 0;
		
		while (d > 2) {
			m += 1;
			d /= 2;
		}
		return m;
	}
	
	public  int nbrDeDeux(int nbrDeDix) {
		int nbrDeDeux = -127;
		if (nbrDeDix > 0 ) {
			int r = nbrDeDix % 3;
			int q = (nbrDeDix - r) / 3 ;
			
			if (r == 0) {
				nbrDeDeux =  9 + (q-1) * 10;
			}
			
			elseif (r == 1) {
				nbrDeDeux = 3 + q * 10;
			}
			
			else {
				nbrDeDeux =  6 + q *10;
			}
		}
		
		elseif (nbrDeDix < 0) {	
			nbrDeDix = -nbrDeDix;
			return -nbrDeDeux(nbrDeDix) - 1;
		}
		
		
		
		return nbrDeDeux;	
	}
}
