; start main program
	ADDSP #6
; Main program
; code pour l'initializaton de la table des methodes
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
	LOAD #1, R2
	STORE R2, 3(GB)
	LOAD #0, R2
	STORE R2, 4(GB)
; Beginning of main instructions:
	ADDSP #6
	WSTR "a = true"
	WSTR " b = false"
	WNL
beginIf0:
	LOAD 3(GB), R0
	CMP #0, R0
	BEQ finAnd0
	LOAD 4(GB), R0
	CMP #0, R0
	BEQ ifInst0
finAnd0:
	BRA elseInst0
ifInst0:
	WSTR "a && !b = true"
	WNL
	BRA finElse0
elseInst0:
	WSTR "a && !b = false"
	WNL
finElse0:
beginIf1:
	LOAD 3(GB), R0
	CMP #0, R0
	BNE ifInst1
	LOAD 4(GB), R0
	CMP #0, R0
	BEQ ifInst1
	BRA elseInst1
ifInst1:
	WSTR "!(!a && b) = true"
	WNL
	BRA finElse1
elseInst1:
	WSTR "a && !b = false"
	WNL
finElse1:
beginIf2:
	LOAD 3(GB), R0
	CMP #0, R0
	BNE finAnd1
	LOAD 4(GB), R0
	CMP #0, R0
	BEQ ifInst2
finAnd1:
	BRA elseInst2
ifInst2:
	WSTR "!a && !b = true"
	WNL
	BRA finElse2
elseInst2:
	WSTR "!a && !b = false"
	WNL
finElse2:
beginIf3:
	LOAD 3(GB), R0
	CMP #0, R0
	BEQ finAnd2
	LOAD 4(GB), R0
	CMP #0, R0
	BEQ finAnd2
	LOAD 3(GB), R0
	CMP #0, R0
	BNE finAnd2
	LOAD 4(GB), R0
	CMP #0, R0
	BEQ ifInst3
finAnd2:
	BRA elseInst3
ifInst3:
	WSTR "!!(!!a && !!b) && !a && !b = true"
	WNL
	BRA finElse3
elseInst3:
	WSTR "!!(!!a && !!b) && !a && !b = false"
	WNL
finElse3:
	HALT
code.Object.equals:
	PUSH R2
	PUSH R3
	LOAD -2(LB), R2
	LOAD -3(LB), R3
	CMP R3, R2
	BEQ code.Object.equals.loadTrueEQ
	LOAD #0, R0
	BRA code.Object.equals.finComparationEQ
code.Object.equals.loadTrueEQ:
	LOAD #1, R0
code.Object.equals.finComparationEQ:
	POP R3
	POP R2
	RTS
pile_pleine:
	WSTR "Error: pile pleine"
	WNL
	ERROR
Overflow_error:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
division_zero:
	WSTR "Error: Division by zero"
	WNL
	ERROR
io_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
print_Error:
	WSTR "Error: print float only in hexa form"
	WNL
	ERROR
deferencement.null:
	WSTR "Erreur : dereferencement de null"
	WNL
	ERROR
; end main program
