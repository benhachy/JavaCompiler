; start main program
; Main program
	STORE R2, 3(GB)
	LOAD #0, R2
	STORE R2, 4(GB)
	LOAD #0, R2
	STORE R2, 5(GB)
	LOAD #0, R2
	STORE R2, 6(GB)
	LOAD #1, R2
	STORE R2, 7(GB)
	STORE R2, 8(GB)
	LOAD #1, R2
	STORE R2, 9(GB)
	LOAD #1, R2
	STORE R2, 10(GB)
	LOAD #0, R2
	STORE R2, 11(GB)
	LOAD #1, R2
	STORE R2, 12(GB)
	LOAD #1, R2
	STORE R2, 13(GB)
; Beginning of main instructions:
beginWhile0:
	LOAD 13(GB), R0
	CMP #0, R0
	BNE instWhile0
	BRA endWhile0
instWhile0:
	LOAD #0, R2
	STORE R2, 8(GB)
	WSTR "Entrer un entier : "
	RINT
	LOAD R1, R2
	STORE R2, 3(GB)
	LOAD 3(GB), R2
	STORE R2, 11(GB)
beginWhile1:
	LOAD 11(GB), R3
	LOAD #0, R2
	CMP R2, R3
	BNE instWhile1
	BRA endWhile1
instWhile1:
	LOAD 11(GB), R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	QUO R0, R2
	STORE R2, 11(GB)
beginWhile2:
	LOAD 6(GB), R3
	LOAD 8(GB), R2
	PUSH R2
	LOAD #1, R2
	LOAD R2, R0
	POP R2
	ADD R0, R2
	CMP R2, R3
	BNE instWhile2
	BRA endWhile2
instWhile2:
	LOAD 7(GB), R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	MUL R0, R2
	STORE R2, 7(GB)
	LOAD 6(GB), R2
	PUSH R2
	LOAD #1, R2
	LOAD R2, R0
	POP R2
	ADD R0, R2
	STORE R2, 6(GB)
	BRA beginWhile2
endWhile2:
	LOAD #1, R2
	STORE R2, 12(GB)
beginWhile3:
	LOAD 11(GB), R3
	PUSH R3
	LOAD 12(GB), R3
	LOAD R3, R0
	POP R3
	QUO R0, R3
	LOAD #0, R2
	CMP R2, R3
	BNE instWhile3
	BRA endWhile3
instWhile3:
	LOAD 10(GB), R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	MUL R0, R2
	STORE R2, 10(GB)
	LOAD 12(GB), R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	MUL R0, R2
	STORE R2, 12(GB)
	BRA beginWhile3
endWhile3:
	LOAD #0, R2
	STORE R2, 6(GB)
	LOAD 3(GB), R2
	PUSH R2
	LOAD 10(GB), R2
	LOAD R2, R0
	POP R2
	QUO R0, R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	LOAD R2, R3
	QUO R0, R2
	MUL R0, R2
	SUB R2, R3
	LOAD R3, R2
	STORE R2, 4(GB)
	LOAD 3(GB), R2
	PUSH R2
	LOAD 7(GB), R2
	LOAD R2, R0
	POP R2
	LOAD R2, R3
	QUO R0, R2
	MUL R0, R2
	SUB R2, R3
	LOAD R3, R2
	PUSH R2
	LOAD 9(GB), R2
	LOAD R2, R0
	POP R2
	QUO R0, R2
	STORE R2, 5(GB)
	WSTR "c = "
	LOAD 5(GB), R1
	WINT
	WSTR ", b = "
	LOAD 4(GB), R1
	WINT
	WNL
	LOAD 9(GB), R2
	PUSH R2
	LOAD #10, R2
	LOAD R2, R0
	POP R2
	MUL R0, R2
	STORE R2, 9(GB)
	LOAD #1, R2
	STORE R2, 7(GB)
	LOAD #1, R2
	STORE R2, 10(GB)
beginIf0:
	LOAD 4(GB), R3
	LOAD 5(GB), R2
	CMP R2, R3
	BNE ifInst0
	BRA elseInst0
ifInst0:
	WSTR "le nombre n'est pas palaindrome  "
	WNL
	LOAD #1, R2
	STORE R2, 9(GB)
	LOAD #0, R2
	STORE R2, 11(GB)
	BRA finElse0
elseInst0:
	LOAD 8(GB), R2
	PUSH R2
	LOAD #1, R2
	LOAD R2, R0
	POP R2
	ADD R0, R2
	STORE R2, 8(GB)
beginIf1:
	LOAD 11(GB), R3
	LOAD #0, R2
	CMP R2, R3
	BNE ifInst1
	BRA elseInst1
ifInst1:
	BRA finElse1
elseInst1:
	WSTR "le nombre est palaindrome  "
	WNL
	LOAD #0, R2
	STORE R2, 13(GB)
finElse1:
finElse0:
	BRA beginWhile1
endWhile1:
	BRA beginWhile0
endWhile0:
	HALT
; end main program
